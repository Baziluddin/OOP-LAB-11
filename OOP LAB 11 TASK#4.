//24k-0559 Bazil-Uddin-Khan Bscs-2H Task4.
#include<iostream>
#include<exception>
#include<cmath>
#include<type_traits>
using namespace std;

class NegativeNumberException :public std::exception
{
    public:
    const char* what() const noexcept override
    {
        return "Negative Number Exception";
    }
};

class InvalidTypeException : public std::exception
{
    public:
    const char* what() const noexcept override
    {
        return " Invalid Type Exception ";
    }
};



template<typename T>

void Sqrt(T num)
{
    if constexpr(!std::is_arithmetic<T>::value)
    {
        throw InvalidTypeException();
    }
    
    else if(num < 0)
    {
        throw NegativeNumberException();
    }
    
    else
    {
        cout << "Number : " << num << " root is " << sqrt(num) << endl;
    }
}

int main()
{
    try
    {
         Sqrt<string>("Hello");
    }
    
    catch(InvalidTypeException & e)
    {
        cout << " Invalid Type Exception " << e.what() << endl;
    }
    
    try
    {
        Sqrt<int>(-6);
    }
    
    catch(NegativeNumberException & e)
    {
        cout <<"Negative Type Exception " << e.what() << endl;
    }
    
    try
    {
        Sqrt<double>(4.0);
    }
    
    catch(NegativeNumberException & e)
    {
        cout << "Negative number exception error : " << e.what() << endl;
    }

    return 0;
}
